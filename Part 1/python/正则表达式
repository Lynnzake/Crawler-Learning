'''
1正则表达式是一种进行数据筛选的方式。
2子是RE中最基本的组成单位，每个RE中至少要包含一个原子。常见的原子类型有
3通字符，非打印字符（\n,\t等），通用字符，原子表等
4字符是正则表达式中具有一些特殊含义的字符，比如重复N次前面的字符等
    .能够匹配任意字符
    ^匹配字符串的开始位置$匹配字符串的结束位置
    *匹配0，1，多次s*则可以匹配s,ss,sss……
    +匹配重复一次或多次的
    ？匹配重复0，1次
    {n}t{6}表示连在一起的6个t
    {n,}至少出现n次
    t|s 表示或
5模式修正符：即可以在不改变正则表达式的情况下，通过模式修正符改变正则表达式的含义，从而
实现一些匹配结果的调整等功能。I M L U S
6.贪婪模式的核心点时尽可能多的匹配，而懒惰模式的核心点就是尽可能少的匹配
7.正则表达式函数有
    re.match()从头开始匹配，第一个字符不满足则pass、
    re.search()从头开始，直到找到匹配的，只匹配出一个结果、
    全局匹配函数re.compile(pat).findall(string)匹配出所有符合表达式的结果、
    re.sub()函数
'''
import re       #正则表达式模块
pat="yue"       #定义一个正则表达
string="http://yun.yue.com"
rst1=re.search(pat,string)  #从string中查找出符合pat的内容出来
print(rst1)

pat2="\n"
string2='''gddfsd
dffsdf'''       #三引号支持换行
rst2=re.search(pat2,string2)
print(rst2)


#结果为：<re.Match object; span=(11, 14), match='yue'>
#<re.Match object; span=(6, 7), match='\n'>

pat3="python[jsd]py"        #[jsd] 原子表通常用中括号表示,不同原子处于同一地位
string3="dfsdpythonjpydg"
rst3=re.search(pat3,string3)
print(rst3)
#结果为<re.Match object; span=(4, 13), match='pythonjpy'>

dat1="python"
dat2="python"
stringl="sdfdgPythondsfd"
rst4=re.search(dat1,stringl)
print(rst4)#无法匹配
rst5=re.search(dat2,stringl,re.I)#添加模式修正符，无视字母大小写
print(rst5)


dat3="p.*y"#贪婪模式，匹配任意多的任意字符
dat4="p.*?y"#懒惰模式,精确定位，满足即可
string4="abcddjpythonasdfpy"
rst6=re.search(dat3,string4)

#匹配网址
>>> pat="[a-zA-Z]+://[^\s]*[.com|.cn]"
#\s为任意空白字符，^\s相当于取非运算
>>> string='<a href="http://www.baidu.com">dhfusdf</a>'
>>> rst=re.compile(pat).findall(string)
>>> print(rst)
['http://www.baidu.com']


#爬取网页中的QQ号（查看网页源码后总结格式）
cat="<em>QQ:(.*?)</em>"#添加小括号的目的是为了提取中间的某个部分出来而不显示其余部分
import urllib.request
data=urllib.request.urlopen(string).read()
result=re.compile(cat).findall(str(data))
print(result)
>>>['1287119515']

